#include <map>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iterator>
#include <queue>
#include <cassert>
#include <cstring>

using namespace std;

#define pl cout<<endl;
#define all(v) v.begin(),v.end()
#define sz(v) v.size()
#define SENTINEL 1000001
#define ii(x,y) make_pair(x,y)


typedef long long int lli;
typedef vector<string, string> vpss;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<char> vc;
typedef map<string, int> msi;
typedef vector<pair<int, int> > vpii;
typedef pair<int, int> pii;
typedef set<int> SI;
typedef set<int>::iterator SI_it;

int BRD[9][9];

struct State{
  int M[9][9],i,j,k,p,q;
  int depth;
  int nv_x,nv_y; // next vacant pos
  SI s,rst,cst;
  SI_it it;

  State(){}
  State(int mat[9][9],int d, int nvx,int nvy){
    for(i=0;i<9;i++)for(j=0;j<9;j++)M[i][j]=mat[i][j];
    depth=d;
    nv_x=nvx;
    nv_y=nvy;
  }
  
  bool isgoal(){
    for(p=0;p<9;p+=3)
      for(q=0;q<9;q+=3){
	for(i=p;i<p+3;i++)
	  for(j=q;j<q+3;j++)
	    if((s.insert(M[i][j])).second==false)
	      return false;
	s.clear();	
      }

    for(i=0;i<9;i++){
      for(j=0;j<9;j++){
	if((rst.insert(M[i][j])).second==false)
	  return false;
	if((cst.insert(M[j][i])).second==false)
	  return false;
      }
      cst.clear();
      rst.clear();
    }
    return true;
  }

  void show()
  {
    for(i=0;i<9;i++){
      for(j=0;j<9;j++)
	printf("%d ", M[i][j]);
      printf("\n");
    }pl;
  }
};

bool possible(int k, int x, int y, int *M[9])
{
  int bx=(3*x)*3,by=(3*y)*3,i,j;
  for(i=0;i<y;i++)if(M[x][i]==k)return 0;
  for(i=0;i<x;i++)if(M[i][y]==k)return 0;

  for(i=bx;i<bx+3;i++)
    for(j=by;j<by+3;j++)
      if(i!=x&&j!=y&&M[i][j]==k) return 0;

  return 1;
}

bool setinboard(int i,int j){return BRD[i][j];}

pii getnextvacant(int x,int y,int *mat[9])
{
}

void solve(State root)
{
  if(root.isgoal()){
    printf("Root is goal state!\n");
    return;
  }
  else printf("Not goal state.\n");

  int i,j,k,mat[9][9],x,y;
  stack<State> S;

  State ts;
  pii vp;
  S.push(root);

  while(!S.empty()){
    ts=S.top();S.pop();

    if(ts.isgoal()){
      ts.show();
      return;
    }

    x=ts.nv_x;y=ts.nv_y;
    if(setinboard(x,y))continue;
    
    for(i=0;i<9;i++)for(j=0;j<9;j++)mat[i][j]=ts.M[i][j];

    for(i=1;i<=9;i++){
      if(possible(i,x,y,mat){
	  mat[x][y]=i;
	  vp=getnextvacant(x,y,mat);
	  S.push(State(mat,tp.depth+1,vp.x,vp.y));
	}
    }
    
  }
}

int main()
{
  int M[9][9],i,j,k;

  // empty is denoted by 0
  for(i=0;i<9;i++)
    for(j=0;j<9;j++){
      cin>>M[i][j];
      BRD[i][j]=M[i][j];
    }

  for(i=0;i<9;i++)
    for(j=0;j<9;j++)
      if(!M[i][j]) goto haha;

 haha:
  State r(M,0,i,j);
  r.show();
  solve(r);
  return 0;
}

